{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "WordPress Template designed to install WordPress using Chef. Alayshia",
    "Parameters": {
 
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

        "InstanceType" : {
          "Description" : "WebServer EC2 instance type",
          "Type" : "String",
          "Default" : "t2.small",
          "AllowedValues" : [ "t2.micro", "t2.small"],
          "ConstraintDescription" : "must be a valid EC2 instance type."
    },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "Hostname": {
            "Description": "Database Endpoint",
            "Type": "String",
            "Default": "localhost",
            "ConstraintDescription": "Endpoint of the MYSQL DB"
        },
        "DBPort": {
            "Description": "Database Endpoint Port",
            "Type": "String",
            "Default": "3306",
            "ConstraintDescription": "Endpoint port for MYSQL DB"
        },
        "DBName": {
            "Default": "wordpressdb",
            "Description": "The WordPress database name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBUser": {
            "NoEcho": "true",
            "Description": "The WordPress database admin account username",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBPassword": {
            "NoEcho": "true",
            "Description": "The WordPress database admin account password",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters."
        },
        "DBRootPassword": {
            "NoEcho": "true",
            "Description": "MySQL root password",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters."
        }
    },
    "Mappings": {
        "RegionMap": {
      "us-east-1": {"AMI": "ami-4fffc834"
      },
      "us-east-2": {
        "AMI": "ami-ea87a78f"
      },
      "us-west-1": {
        "AMI": "ami-3a674d5a"
      },
      "us-west-2": {
        "AMI": "ami-aa5ebdd2"
      }
    }
  },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "Subnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": "10.0.0.0/24",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "Route": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "SubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Subnet"
                },
                "RouteTableId": {
                    "Ref": "RouteTable"
                }
            }
        },
        "NetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "InboundHTTPNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "100",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "80",
                    "To": "80"
                }
            }
        },
        "InboundSSHNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "101",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "22",
                    "To": "22"
                }
            }
        },
        "InboundResponsePortsNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "102",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                }
            }
        },
        "OutBoundHTTPNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "100",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "80",
                    "To": "80"
                }
            }
        },
        "OutBoundHTTPSNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "101",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "443",
                    "To": "443"
                }
            }
        },
        "OutBoundResponsePortsNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "102",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                }
            }
        },
        "SubnetNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Subnet"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            }
        },
        "IPAddress": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "AttachGateway",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "WebServer"
                }
            }
        },
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access via port 80 and SSH access",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "WebServer": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "AttachGateway",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "wordpress_install": [
                            "install_cfn",
                            "install_chef",
                            "install_chefdk",
                            "install_wordpress",
                            "run_chef"
                        ]
                    },
                    "install_cfn": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.WebServer.Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "         --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource WebServer ",
                                            "         --configsets wordpress_install ",
                                            "         --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "install_chef": {
                        "sources": {
                            "/var/chef/chef-repo": "http://github.com/opscode/chef-repo/tarball/master"
                        },
                        "files": {
                            "/tmp/install.sh": {
                                "source": "https://www.opscode.com/chef/install.sh",
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/var/chef/chef-repo/.chef/knife.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cookbook_path [ '/var/chef/chef-repo/berks-cookbooks' ]\n",
                                            "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/var/chef/chef-repo/.chef/client.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cookbook_path [ '/var/chef/chef-repo/berks-cookbooks' ]\n",
                                            "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "01_export1": {
                                "command": "export LANG=en_US.UTF-8;unset LC_ALL;export LC_COLLATE=C;"                                
                            },
                        
                            "02_make_chef_readable": {
                                "command": "sudo chmod +rx /var/chef"
                            },
                            "03_install_chef": {
                                "command": "bash /tmp/install.sh",
                                "cwd": "/var/chef"
                            },
                            "04_create_node_list": {
                                "command": "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
                                "cwd": "/var/chef/chef-repo",
                                "env": {
                                    "HOME": "/var/chef"
                                }
                            }
                        }
                    },
                    "install_chefdk": {
                        "packages": {
                            "rpm": {
                                "chefdk": "https://packages.chef.io/files/stable/chefdk/2.0.26/el/6/chefdk-2.0.26-1.el6.x86_64.rpm"
                            }
                        }
                    },
                    "install_wordpress": {
                        "files": {
                            "/var/chef/chef-repo/.chef/knife.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                                            "node_path [ '/var/chef/chef-repo/nodes' ]\n",
                                            "chef_repo_path [ '/var/chef/chef-repo' ]\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/var/chef/chef-repo/.chef/client.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                                            "node_path [ '/var/chef/chef-repo/nodes' ]\n",
                                            "chef_repo_path [ '/var/chef/chef-repo' ]\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/var/chef/chef-repo/Berksfile": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "source 'https://supermarket.getchef.com'\n\n",

                                             "metadata\n\n",

                                             "group :integration do\n",
                                             "  cookbook 'apt', '~> 2.6.1'\n",
                                             "  cookbook 'wordpress', '= 2.3.0'\n",
                                             "  solver :ruby, :required\n",
                                            "end\n"
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/var/chef/chef-repo/cookbooks/wordpress/attributes/default.rb": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "node['wordpress']['db']['pass'] = '",
                                            {
                                                "Ref": "DBPassword"
                                            },
                                            "'\n",
                                            "node['wordpress']['db']['user'] = '",
                                            {
                                                "Ref": "DBUser"
                                            },
                                            "'\n",
                                            "node['wordpress']['db']['host'] = '",
                                            {
                                                "Ref": "Hostname"
                                            },
                                            "'\n",
                                            "node['wordpress']['db']['port'] = '",
                                            {
                                                "Ref": "DBPort"
                                            },
                                            "'\n",
                                            "normal['wordpress']['db']['name'] = '",
                                            {
                                                "Ref": "DBName"
                                            }
                                        ]
                                    ]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {

                            "01_get_cookbook": {
                                "command": "knife cookbook site download wordpress 2.3.0",
                                "cwd": "/var/chef/chef-repo",
                                "env": {
                                    "HOME": "/var/chef"
                                }            
                            },
                            "01_set_timeout": {
                                "command": "export SOLVE_TIMEOUT=1000",
                                "cwd": "/var/chef/chef-repo",
                              "env": {
                                    "HOME": "/var/chef"
                                }
                            },
                            "02_unpack_cookbook": {
                                "command": "sudo tar xvf /var/chef/chef-repo/wordpress* -C /var/chef/chef-repo/cookbooks/",
                                "cwd": "/var/chef/chef-repo",
                              "env": {
                                    "HOME": "/var/chef"
                                }
                            },
                            "04_move_berksfile": {
                                "command": "yes | cp -rf /var/chef/chef-repo/Berksfile /var/chef/chef-repo/cookbooks/wordpress",
                                "cwd": "/var/chef/chef-repo",
                            "env": {
                                    "HOME": "/var/chef"
                                }
                            },
                            "05_vendorize_berkshelf": {
                                "command": "berks vendor",
                                "cwd": "/var/chef/chef-repo/cookbooks/wordpress",
                            "env": {
                                    "HOME": "/var/chef"
                                }
                            },
                             "06_copy_vendor_files": {
                                "command": "sudo cp -a /var/chef/chef-repo/cookbooks/wordpress/berks-cookbooks/* /var/chef/chef-repo/cookbooks/",
                                "cwd": "/var/chef/chef-repo/cookbooks/wordpress",
                            "env": {
                                    "HOME": "/var/chef"
                                }
                            },
                            "07_configure_node_run_list": {
                            "command": "knife node run_list add -z `knife node list -z` recipe[wordpress]",
                            "cwd": "/var/chef/chef-repo",
                                "env": {
                                    "HOME": "/var/chef"
                                }
                            }
                        }
                    },
                    "run_chef": {
                        "commands": {
                            "01_run_chef_client": {
                                "command": "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
                                "cwd": "/var/chef/chef-repo",
                                "env": {
                                    "HOME": "/var/chef"
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
               "ImageId": {
          "Fn::FindInMap": ["RegionMap", {
            "Ref": "AWS::Region"
          }, "AMI"]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "Tags": [{
          "Key": "Name",
          "Value": {
            "Ref": "AWS::StackName"
          }
        }, {
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackId"
          }
        }],
        "NetworkInterfaces": [{
          "AssociatePublicIpAddress": "true",
          "DeviceIndex": "0",
          "GroupSet": [{
            "Ref": "WebServerSecurityGroup"
          }],
          "SubnetId": {
            "Ref": "Subnet"
          }
        }],
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                       "#!/bin/bash -xe\n",
                       "export LANG=en_US.UTF-8\n",
                       "yum update -y aws-cfn-bootstrap\n",

                       "/opt/aws/bin/cfn-init -v ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource WebServer ",
                       "         --configsets wordpress_install ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n",

                       "/opt/aws/bin/cfn-signal -e $? ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource WebServer ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      }
    }
  },

  "Outputs" : {
    "WebsiteURL" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "WebServer", "PublicIp" ]}, "/wordpress" ]]},
      "Description" : "WordPress Website"
    }
  }}
